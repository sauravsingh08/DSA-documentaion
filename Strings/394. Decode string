
// iterative method (intutive)

string decodeString(string s) {
          stack<string> chars;
        stack<int> nums;
        string res;
        int num = 0;
        for(char c : s) {
            if(isdigit(c)) {
                num = num*10 + (c-'0');                              
            }
            else if(isalpha(c)) {
                res.push_back(c);                
            }
            else if(c == '[') {
                chars.push(res);
                nums.push(num);
                res = "";
                num = 0;
            }
            else if(c == ']') {
                string tmp = res;
                for(int i = 0; i < nums.top()-1; ++i) {
                    res += tmp;
                }
                res = chars.top() + res;
                chars.pop(); nums.pop();
            }
        }
        return res;
    }
    
    // recurssion
    
    class Solution {
    
    string decodeStringUtil(string &s, int &index)
    {
        string result;
        while(s[index] && s[index] != ']')
        {
            if(isdigit(s[index]))
            {
                int k = 0;
                while(s[index] && isdigit(s[index]))
                    k = k*10 + s[index++]-'0';
                
                index++;
                string r = decodeStringUtil(s, index);
                while(k-- > 0)
                    result += r;
                index++;
            }
            else
                result += s[index++];
        }
        
        return result;
    }
    
public:
    string decodeString(string s) {
    
        int index = 0;
        return decodeStringUtil(s, index);
    }
};
