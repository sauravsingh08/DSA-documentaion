/* recurssion
   int maxScoreUtil(vector<int>& cardPoints, int k , int i, int j)
    {
        int score;
        if(k == 0 || i > j)
            return 0;
        
        score = max(cardPoints[i]+maxScoreUtil(cardPoints,k-1,i+1,j),cardPoints[j]+maxScoreUtil(cardPoints,k-1,i,j-1));
        
        return score;
    }*/


int maxScore(vector<int>& cardPoints, int k) {
        
       // return maxScoreUtil(cardPoints, k , 0 ,cardPoints.size()-1);
        int best = 0,total;
        for(int i = 0 ; i < k; i++)
            best += cardPoints[i];
            total = best;
        for(int i = k - 1, j = cardPoints.size()-1; ~i; i--,j--)
            total += cardPoints[j]- cardPoints[i], best = max(best,total);
        
        return best;
    }
