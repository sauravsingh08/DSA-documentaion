

// o(n) runtime, o(n) space
    int rob(vector<int>& nums) {
        int n = nums.size();

        if(n == 1)
            return nums[0];
        
        vector<int>dp(n, 0);
        dp[0] = nums[0];
        dp[1] = max(nums[0], nums[1]);
        
        for(int i = 2; i < n; i++)
            dp[i] = max(dp[i - 1], nums[i] + dp[i - 2]);
        return dp[n - 1];
    }
    
 // o(n) runtime, o(1) space
    int rob(vector<int>& nums) { 
        int n = nums.size(), pre = 0, cur = 0;
        for 
 // o(n) runtime, o(1) space
    int rob(vector<int>& nums) { 
        int n = nums.size(), pre = 0, cur = 0;
        for (int i = 0; i < n; i++) {
            int temp = max(pre + nums[i], cur);
            pre = cur;
            cur = temp;
        }
        return cur;
    }
